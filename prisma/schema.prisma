// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
<<<<<<< HEAD
  
  posts     Post[]
  gamePlayers GamePlayer[]
  turns     Turn[]
=======
>>>>>>> 6a9f7057c9d8f4ee5b0aef24d4b8763f7d5db0e9
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
<<<<<<< HEAD
  
  author    User     @relation(fields: [authorId], references: [id])
}

// UNO Game Models
model Game {
  id              String   @id @default(cuid())
  status          GameStatus @default(WAITING)
  direction       Direction @default(CLOCKWISE)
  currentPlayerIndex Int    @default(0)
  winner          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  players         GamePlayer[]
  turns           Turn[]
  cards           GameCard[]
  
  @@map("games")
}

model GamePlayer {
  id       String @id @default(cuid())
  gameId   String
  playerId String
  name     String
  score    Int    @default(0)
  saidUno  Boolean @default(false)
  joinedAt DateTime @default(now())
  
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player   User   @relation(fields: [playerId], references: [id])
  hand     GameCard[]
  
  @@unique([gameId, playerId])
  @@map("game_players")
}

model GameCard {
  id       String @id @default(cuid())
  gameId   String
  color    String
  value    String
  display  String
  location CardLocation @default(DECK)
  playerId String?
  order    Int    @default(0)
  createdAt DateTime @default(now())
  
  game     Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player   GamePlayer? @relation(fields: [playerId], references: [id])
  
  @@map("game_cards")
}

model Turn {
  id        String   @id @default(cuid())
  gameId    String
  playerId  String
  action    String
  cardId    String?
  timestamp DateTime @default(now())
  
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player    User     @relation(fields: [playerId], references: [id])
  
  @@map("turns")
}

enum GameStatus {
  WAITING
  PLAYING
  FINISHED
}

enum Direction {
  CLOCKWISE
  COUNTERCLOCKWISE
}

enum CardLocation {
  DECK
  DISCARD
  HAND
=======
>>>>>>> 6a9f7057c9d8f4ee5b0aef24d4b8763f7d5db0e9
}